{"version":3,"sources":["../src/sqlexec.ts"],"names":[],"mappings":"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","file":"sqlexec.js","sourcesContent":["'use strict';\n//var jinst = require('jdbc/lib/jinst');\nvar AsciiTable = require('ascii-table');\nvar _ = require('lodash');\n\nvar TPool = require('jdbc').Pool;\n\nimport { ISQLExecutor} from './constants';\n\n\n\n\n  /**\n * \"Fixes the node-jdbc collect to also accept \"\n * @param {*} callback\n */\nvar ResultSet_toObjectIter = function (callback) {\n  var self = this;\n\n  self.getMetaData(function (err, rsmd) {\n    if (err) {\n      return callback(err);\n    } else {\n      var colsmetadata = [];\n\n      rsmd.getColumnCount(function (err, colcount) {\n\n        if (err)\n          return callback(err);\n\n        // Get some column metadata.\n        _.each(_.range(1, colcount + 1), function (i) {\n          colsmetadata.push({\n            // modification, fall back to column name\n            label:  rsmd._rsmd.getColumnLabelSync(i) || rsmd._rsmd.getColumnNameSync(i),\n            type: rsmd._rsmd.getColumnTypeSync(i)\n          });\n        });\n\n        callback(null, {\n          labels: _.map(colsmetadata, 'label'),\n          types: _.map(colsmetadata, 'type'),\n          rows: {\n            next: function () {\n              var nextRow;\n              try {\n                nextRow = self._rs.nextSync(); // this row can lead to Java RuntimeException - sould be cathced.\n              }\n              catch (error) {\n                callback(error);\n              }\n              if (!nextRow) {\n                return {\n                  done: true\n                };\n              }\n\n              var result = {};\n\n              // loop through each column\n              _.each(_.range(1, colcount + 1), function (i) {\n                var cmd = colsmetadata[i - 1];\n                var type = self._types[cmd.type] || 'String';\n                var getter = 'get' + type + 'Sync';\n\n                if (type === 'Date' || type === 'Time' || type === 'Timestamp') {\n                  var dateVal = self._rs[getter](i);\n                  result[cmd.label] = dateVal ? dateVal.toString() : null;\n                } else {\n                  // If the column is an integer and is null, set result to null and continue\n                  if (type === 'Int' && _.isNull(self._rs.getObjectSync(i))) {\n                    result[cmd.label] = null;\n                    return;\n                  }\n\n                  result[cmd.label] = self._rs[getter](i);\n                }\n              });\n\n              return {\n                value: result,\n                done: false\n              };\n            }\n          }\n        });\n      });\n    }\n  });\n};\n\nexport class SQLExec {\n  Pool : any;\n  /*\n  var config = {\n//    url: 'jdbc:hsqldb:hsql://localhost/xdb',\n//    user: 'SA',\n    libpath : './drivers/hl-jdbc-2.3.90.jar',\n    drivername : 'com.sap.vora.jdbc.VoraDriver',\n    url : 'jdbc:hanalite://' + '127.0.0.1:2202',\n    //url : 'jdbc:hanalite://' + '127.0.0.1:2202' + '/?resultFormat=binary',\n    user : '',\n    logging : 'info',\n    password: '',\n    minpoolsize: 2,\n    maxpoolsize: 500\n//    properties : {user: '', password : ''}\n  };\n  */\n  constructor(options : any) {\n    this.Pool = TPool;\n  }\n\n  makeAsciiTable(obj : any) {\n    /*\n    const table1 = new AsciiTable();\n    table1.setHeading('a','b','c')\n      .addRow('a', 'apple', 'Some longer string');\n    table1.addRow('b', 'banana', 'hi')\n      .addRow('c', 'carrot', 'meow')\n      .addRow('e', 'elephants');\n    console.log(table1.toString());\n   */\n    const table = new AsciiTable();\n\n    //const table2 = new AsciiTable();\n    //console.log(table2.toString());\n\n    if(obj.length  > 0 ) {\n      var arr = Object.getOwnPropertyNames(obj[0]);\n      console.log('here arr' + arr);\n      table.setHeading.apply(table, arr);\n    }\n    obj.forEach( function(entry) {\n      console.log( JSON.stringify(entry));\n      console.log(' here ' +  JSON.stringify(obj[0]));\n      var arr2 = Object.getOwnPropertyNames(obj[0]).map(function(key) { return entry[key];});\n      table.addRow.apply(table, arr2);\n    });\n    return table.toString();\n  };\n  /* table\n    .addRow('a', 'apple', 'Some longer string')\n    .addRow('b', 'banana', 'hi')\n    .addRow('c', 'carrot', 'meow')\n    .addRow('e', 'elephants')\n*/\n\n\n  makeRunner = function(testpool) : ISQLExecutor {\n    var that = this;\n    var r = {\n      pool: testpool ,\n      execStatement : function(statement) {\n        return that.runStatementFromPool(statement, testpool);\n      }\n    };\n    return r;\n  };\n\n  getExecutors(pool, nr : number)  : ISQLExecutor[]{\n    var u = new SQLExec(pool);\n    var res = [];\n    for(var i = 0; i < nr; ++i )\n    {\n      res.push(u.makeRunner(pool));\n    }\n    return res;\n  };\n\n  /**\n   *\n   * @param statement\n   * @param testpool\n   */\n  runStatementFromPool(statement : string , testpool : any) : Promise<any>\n  {\n    return new Promise(function(resolve, reject)\n    {\n      var connObj = undefined;\n      var callback = function(err, result?) {\n        if(connObj) {\n          testpool.release(connObj, function(err2) {\n            if (err2) {\n              console.log('error releasing connection');\n            }\n            if( err) {\n              reject(err);\n              return;\n            }\n            resolve({ pool: testpool, conn: result.conn, result: result.result});\n          });\n          return;\n        }\n        if(err) {\n          reject(err);\n          return;\n        }\n        resolve({ pool: testpool, conn: result.conn, result: result.result});\n      };\n      testpool.reserve( function(err, aconnObj)\n      {\n        if(err) {\n          callback(err);\n          return;\n        }\n        connObj = aconnObj;\n        var conn = connObj.conn;\n        conn.createStatement( function (err, sqlstatement)\n        {\n          if(err) {\n            callback(err);\n            return;\n          }\n          //statement.executeQuery('CREATE TABLE IF NOT EXISTS T1 ( id int primary key, abc varchar(10));'\n          //statement.executeQuery('INSERT INTO T1 (id, abc) values (2, \\'def\\');'\n          sqlstatement.executeQuery(statement, function(err, resultSet)\n          {\n            if(err) {\n              callback(err);\n              return;\n            }\n            resultSet.toObjectIter = ResultSet_toObjectIter;\n            resultSet.toObjArray(function(err, results) {\n              if(err) {\n                callback(err);\n                return;\n              }\n              if(results.length <= 0) {\n                console.log(' no length result ');\n              }\n              callback(null, { conn: conn, result: results} );\n            });\n          });\n        });\n      });\n    });\n  };\n\n}\n\n"],"sourceRoot":"."}