{"version":3,"sources":["../src/constants.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;;AACb,IAAkB,MAKjB;AALD,WAAkB,MAAM;IACtB,yCAAW,CAAA;IACX,mCAAQ,CAAA;IACR,yCAAW,CAAA;IACX,yCAAW,CAAA;AACb,CAAC,EALiB,MAAM,GAAN,cAAM,KAAN,cAAM,QAKvB;AAED,IAAkB,IAGjB;AAHD,WAAkB,IAAI;IACpB,2CAAc,CAAA;IACd,uCAAY,CAAA;AACd,CAAC,EAHiB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAGrB;AAcA,CAAC;AAWF;IAAA;QACE,aAAQ,GAAY,CAAC,CAAC;QACtB,kBAAa,GAAY,CAAC,CAAC;QAC3B,gBAAW,GAAY,CAAC,CAAC;QACzB,qBAAgB,GAAY,CAAC,CAAC;QAC9B,aAAQ,GAAW,CAAC,CAAC;QACrB,cAAS,GAAW,CAAC,CAAC;IACxB,CAAC;CAAA;AAPD,0BAOC;AAWA,CAAC;AAeD,CAAC;AAsBD,CAAC;AAUD,CAAC;AAmBD,CAAC","file":"constants.js","sourcesContent":["\r\n\"use strict\";\r\nexport const enum Status {\r\n  RUNNING = 0,\r\n  DONE = 2,\r\n  STOPPED = 1,\r\n  INITIAL = 3\r\n}\r\n\r\nexport const enum Mode {\r\n  SEQUENTIAL = 0,\r\n  PARALLEL = 1\r\n}\r\n\r\nexport interface ISQLExecutor {\r\n  execStatement : (statement: string) => Promise<Object>\r\n}\r\n\r\n\r\n\r\nexport interface IRun {\r\n  index: number,\r\n  statement : string,\r\n  status: Status,\r\n  duration : number,\r\n  executor : ISQLExecutor\r\n};\r\n\r\nexport interface IMetrics {\r\n  parallel : number,\r\n  count_total : number,\r\n  count_started : number,\r\n  count_ok : number,\r\n  sum_duration_all : number,\r\n  count_bad : number,\r\n}\r\n\r\nexport class Metrics implements IMetrics {\r\n  parallel : number = 0;\r\n  count_started : number = 0;\r\n  count_total : number = 0;\r\n  sum_duration_all : number = 0;\r\n  count_ok: number = 0;\r\n  count_bad: number = 0;\r\n}\r\n\r\nexport interface IParallelExecutor {\r\n  stopOp : (string) => void,\r\n  triggerLoop : () => void,\r\n  startOpRepeat: (\r\n    tag: string,\r\n    statement: string,\r\n    parallel: number,\r\n    options?: IOptions,\r\n    cb? : ICallbacks) => string\r\n};\r\n\r\n\r\n/**\r\n * Record of a result received\r\n */\r\nexport interface IResultRec {\r\n  ts : string,\r\n  /**\r\n   * Time, absolute (Date.now())\r\n   */\r\n  t : number,\r\n  delta_t : number,\r\n  rc : boolean,\r\n  res : any\r\n};\r\n\r\n/**\r\n * allows to\r\n */\r\nexport interface ICallbacks {\r\n  done? : ( op : IParallelOp ) => void,\r\n  /**\r\n   * Always invoked on any response\r\n   */\r\n  progress? : ( op : IParallelOp ) => void,\r\n  /**\r\n   * Only invoked on successful results\r\n   */\r\n  result? : (err : object, result : any) => void\r\n}\r\n\r\nexport type ITimingMap = Map<string, Map<number, number> >;\r\n\r\nexport interface ITimingRec {\r\n  time : number,\r\n  rec : ITimingMap\r\n};\r\n\r\n\r\nexport interface IOptions {\r\n  continuous : boolean,\r\n  forcename? : string,\r\n  terminate_nr? : number,\r\n  terminate_delta_t? : number,\r\n  every_t? : number,\r\n  t_last? : number\r\n};\r\n\r\nexport interface IParallelOp {\r\n  tag : string,\r\n  name: string,\r\n  statement: string,\r\n  status: Status,\r\n  parallel: number,\r\n  cps : any[],\r\n  cp_running: number,\r\n  options : IOptions,\r\n  mode : Mode,\r\n  t_started : number,  /* number in ms when this was started*/\r\n  logit?: (a: string) => void,\r\n  slots: IRun[],\r\n  allresults : IResultRec[],\r\n  timings : ITimingRec[],\r\n  metrics : IMetrics,\r\n  callbacks? : ICallbacks\r\n};\r\n\r\n"],"sourceRoot":"ABC"}