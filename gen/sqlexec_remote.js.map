{"version":3,"sources":["../src/sqlexec_remote.ts"],"names":[],"mappings":"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","file":"sqlexec_remote.js","sourcesContent":["var cnt = 0;\nimport * as child_process from 'child_process';\n//import { removeListener, fork } from 'cluster';\n//import { LOADIPHLPAPI } from 'dns';\n\nimport * as debug from 'debug';\n//import { INSPECT_MAX_BYTES } from 'buffer';\nconst debuglog = debug('sqlexec_remote');\n\n'use strict';\n\n/**\n * array of all forks\n */\nvar forks : child_process.ChildProcess[] = [];\n/**\n * running counter of ops ever sent\n */\nvar tokencnt = 0;\n/**\n *\n */\nvar openops = {};\n\n/**\n * Execute queries remote.\n *\n *\n */\nfunction setUpForks(nrforks : number, configfile : string)\n{\n  for(var i = 0; i < nrforks; ++i) {\n    console.log('starting fork' + i);\n    var cp = undefined;\n    if(configfile) {\n      cp = child_process.fork(`${__dirname}/runinfork.js`, [configfile], { silent: true });\n    } else {\n      cp = child_process.fork(`${__dirname}/runinfork.js`, undefined, { silent: true });\n    }\n    forks.push( cp );\n    cp.on('message', (m) => {\n      debuglog.enabled && debuglog('received message ' +  m.handle + ' ' + JSON.stringify(m.result) + ' ' + JSON.stringify(m.err));\n      var op = openops[m.handle];\n      if(!op) {\n        console.log(\"unknown handle in message\" + m.handle);\n        return;\n      }\n      if(m.err) {\n        op.reject(m.err);\n      } else {\n        debuglog.enabled && debuglog('resolving with ' + JSON.stringify(m.result));\n        op.resolve({ result : m.result});\n      }\n      delete op[m.handle];\n    })\n  }\n};\n\nfunction stopForks() {\n  forks.forEach( (fork, idx) => console.log('fork' + idx + ' ' + fork.connected ));\n  forks.forEach( fork => fork.kill() );\n  forks  = [];\n  openops = {};\n}\n\n\nexport class Forks {\n  constructor(nr : number, configFileName : string) {\n    setUpForks(nr, configFileName);\n  }\n  getFork(index : number) {\n    return forks[index];\n  }\n  stop() {\n    stopForks();\n  }\n  getForksCount() {\n    return forks.length;\n  }\n  getExecutors(exec_per_fork : number) : ISQLExecutor[] {\n    var u = new SQLExecRemote();\n    var res : ISQLExecutor[] = [];\n    for(var i = 0; i < forks.length; ++i)\n    {\n      for(var k = 0; k < exec_per_fork; ++k) {\n        res.push( u.makeRunner(forks[i]) );\n      }\n    }\n    return res;\n  }\n};\n\nimport { ISQLExecutor } from './constants';\n\nexport class SQLExecRemote {\n    makeRunner( fork : child_process.ChildProcess ) : ISQLExecutor {\n    var r = {\n      pool: fork ,\n      execStatement : function(statement) {\n        return new Promise(function(resolve, reject)\n        {\n          ++tokencnt;\n          openops[tokencnt] = { resolve : resolve, reject : reject };\n          console.log('sending message' + tokencnt + ' ' + statement);\n          fork.send( { handle : tokencnt, statement : statement } );\n        });\n      }\n    };\n    return r;\n  };\n}\n"],"sourceRoot":"."}