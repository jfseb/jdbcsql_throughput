{"version":3,"sources":["../src/runinfork.ts"],"names":[],"mappings":"AACA,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,WAAW,GAAG,OAAO,CAAC;AAE9D,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;AAGpC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,OAAO,GAAG,SAAS,CAAC;AACxB,IAAI,OAAO,GAAG,SAAS,CAAC;AACxB,IAAI,QAAQ,GAAG,SAAS,CAAC;AAEzB,IAAI,CAAC;IACL,IAAI,KAAK,GAAG,EAAE,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;IAC/C,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AAAC,KAAK,CAAA,CAAC,CAAC,CAAC,CACV,CAAC;IACC,OAAO,CAAC,GAAG,CAAC,sEAAsE,GAAG,CAAC,CAAC,CAAA;AACzF,CAAC;AACD,EAAE,CAAA,CAAC,OAAO,CAAC,CAAC,CAAC;IACX,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3B,qFAAqF;IACrF,OAAO,CAAC,GAAG,CAAC,gDAAgD,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACxF,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAEtC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QACvD,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACxB,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAE3B,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACxB,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,UAAS,GAAG,EAAE,EAAE;QAC1C,QAAQ,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC;QACnC,QAAQ,CAAC,kBAAkB,GAAG,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,UAAU,CAAC,cAAY,CAAC,CAAC,CAAC;IACnC,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AACnC,CAAC;AAAC,IAAI,CAAC,CAAC;IAEN,IAAI,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,SAAS,0BAA0B,CAAC;IAE/E,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,cAAc,CAAC,CAAC;IAChD,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,MAAM,CAAA;IAC3C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAE/C,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;IAElC,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;IAE5B,QAAQ,CAAC,UAAU,CAAE,cAAa,CAAC,CAAE,CAAC;AACxC,CAAC;AAED,iMAAiM;AACjM,8HAA8H;AAC9H,sDAAsD;AAEtD,IAAI,QAAQ,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1D,qFAAqF;AACrF,gBAAgB;AAChB,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC;IACtB,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC;IACT,CAAC;IACD,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAE,GAAG;QAEzC,IAAI,EAAE,GAAI,EAAE,MAAM,EAAG,CAAC,CAAC,MAAM,EAAE,MAAM,EAAG,GAAG,CAAC,MAAM,EAAG,GAAG,EAAG,SAAS,EAAE,CAAC;QACvE,QAAQ,CAAC,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACtD,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACnB,CAAC,CACF,CAAC,KAAK,CAAE,GAAG;QACV,IAAI,CAAC;YACH,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QACvB,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACb,CAAC;QACD,IAAI,EAAE,GAAI,EAAE,MAAM,EAAG,CAAC,CAAC,MAAM,EAAE,MAAM,EAAG,SAAS,EAAE,GAAG,EAAG,GAAG,EAAC,CAAC;QAC9D,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,OAAO,CAAC,IAAI,CAAE,EAAE,CAAE,CAAC;IACrB,CAAC,CACF,CAAA;AACD,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC","file":"runinfork.js","sourcesContent":["\nconsole.log('I AM RUNNING THE FORK!' + process.argv[2]);\nvar root = (process.env.FSD_COVERAGE) ? './gen_cov' : './gen';\n\nvar debug = require('debug');\nconst debuglog = debug('runinfork');\n\n\nvar fs = require('fs');\nvar cfgdata = undefined;\nvar SQLExec = undefined;\nvar testpool = undefined;\n\ntry {\nvar dataf = fs.readFileSync('jdbcsql_config.json');\n    cfgdata = JSON.parse(dataf);\n} catch(e) \n{\n  console.log('could not read ./jdbcsql_config.json, falling back to default config' + e)\n}\nif(cfgdata) {\n  var path = require('path');\n  //var config_path = path.dirname(require.resolve('jdbcsql_throughput/package.json'));\n  console.log('using local config file ./jdbcsql_config.json ' + JSON.stringify(cfgdata));\n  var jinst = require('jdbc/lib/jinst');\n\n  if (!jinst.isJvmCreated()) {\n   console.log('adding drivers from ' + cfgdata.classpath);\n    jinst.addOption('-Xrs');     \n    jinst.setupClasspath(cfgdata.classpath);\n  }\n\n  var Pool = require('jdbc');\n\n  config = cfgdata.config;\n  testpool = new Pool(config, function(err, ok) {\n    debuglog('here we try pool' + err);\n    debuglog('here we try pool' + ok);\n  });\n  testpool.initialize(function() {});\n  SQLExec = require('./sqlexec.js')\n} else {\n\n  var configFileName = process.argv[2] || `${__dirname}/configs/config_derby.js`;\n\n  console.log('configfilename ' + configFileName);\n  var config = require(configFileName).config\n  var Pool = require('jdbc');\n  console.log('config' + JSON.stringify(config));\n\n  SQLExec = require('./sqlexec.js');\n\n  testpool = new Pool(config);\n\n  testpool.initialize( function () {} );\n}\n\n// /scripts/start_cluster.py --num-relational 1 --num-series 0 --num-docstore 0 --num-disk 0 --num-graph 0  --tc-port=2202  --set-config relational.max_memory=250000000 --reconfigure-interval 3\n// /SAPDevelop/hanalite/build/Release/v2client  -clocalhost:2202 -s /SAPDevelop/hanalite_rel_bench/sample_data/gen.viewdef.sql\n// v2client -c127.0.0.1 -s sample_data/tcp_viewdef.sql\n\nvar executor = new SQLExec.SQLExec().makeRunner(testpool);\n// this executable listens to single query requests (without any synchronization etc)\n// and runs them\nprocess.on('message', (m) => {\n  debuglog('IN FORK got ' + JSON.stringify(m));\n  if(!m.statement) {\n    return;\n  }\n  executor.execStatement(m.statement).then( res =>\n    {\n      var m2 =  { handle : m.handle, result : res.result , err : undefined };\n      debuglog(' in fork send result' + JSON.stringify(m2));\n      process.send(m2);\n    }\n  ).catch( err => {\n    try {\n      err = err.toString();\n    } catch (e) {\n    }\n    var m2 =  { handle : m.handle, result : undefined, err : err};\n    console.log(' in fork send Err result' + JSON.stringify(m2));\n    process.send( m2 );\n  }\n)\n});\nconsole.log('I HAVE REGISTERED THE HANDLER!');"],"sourceRoot":"."}