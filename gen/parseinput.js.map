{"version":3,"sources":["../src/parseinput.ts"],"names":[],"mappings":"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","file":"parseinput.js","sourcesContent":["import * as fs from 'fs';\nimport * as assert from 'assert';\nimport * as debug from 'debug';\nconst debuglog = debug('parseinput');\n\n\nexport class IStatementRun\n{\n  parallel: number = 0;\n  statement : string = undefined;\n  tag : string = undefined;\n  terminate_nr? : number = 0;\n  terminate_delta_t? : number = 0;\n};\n\nexport class ParseInput {\n  fnin : string = undefined;\n  src : string = undefined;\n  constructor(fnin : string) {\n    this.fnin = fnin;\n    if(fnin) {\n      this.src = ' ' + fs.readFileSync(fnin);\n    }\n  };\n\n  parseIntArg(prefix : string, input : string, defaultValue : number) {\n    assert(prefix);\n    assert(input);\n    var input = input.replace(/  /g,' ');\n    var args = input.split(/ /);\n    for(var i = 0; i < args.length; ++i) {\n      if(args[i].startsWith(prefix)) {\n        try {\n          return parseInt(args[i].substr(prefix.length));\n        } catch(e) {\n          return defaultValue;\n        }\n      }\n    }\n    return defaultValue;\n  }\n\n  RegExpTagLine : RegExp = new RegExp(/^--\\s*\\[([A-Z0-9_]+)\\]\\s+(.*)/);\n  RegExpComment : RegExp = new RegExp(/^--/);\n\n  isComment(line: string) : boolean\n  {\n    return !!this.RegExpComment.exec(line);\n  }\n\n  parseTagLine(line : string) : { tag: string, tail : string}\n  {\n    var m = this.RegExpTagLine.exec(line);\n    if(!m) {\n      return undefined;\n    }\n    return {\n      tag : m[1],\n      tail : m[2]\n    };\n  }\n  /**\n   * --[TAG] NP=x NP\n   * @param input\n   */\n  parseString(input : string) : IStatementRun[]\n  {\n    var that = this;\n    var res = [];\n    var rec = undefined;\n    var x = input.split(/\\n/);\n    x.forEach( (line,index) => {\n      line = line.trim();\n      console.log('here line ' + index + ' ' + line);\n      var r  = that.parseTagLine(line);\n      console.log(' here r ' + JSON.stringify(r));\n      if(line.length == 0) {\n\n      } else if(r) {\n        console.log(' got a new rec entry ' + JSON.stringify(r));\n        if(rec)\n        {\n          if(!rec.statement) {\n            console.log('missing statement at ' + that.fnin + '[' + index + ':1]');\n            process.exit(-1);\n          }\n          console.log('here adding ' + JSON.stringify(rec));\n          res.push(rec);\n        }\n        assert(r.tag);\n        var tail = r.tail || \"\";\n        rec = new IStatementRun();\n        rec.tag = r.tag;\n        rec.parallel = that.parseIntArg('P=', tail, 1);\n        rec.terminate_delta_t = that.parseIntArg('T=', tail, undefined);\n        console.log('here delta t' + rec.terminate_delta_t );\n        rec.terminate_nr = that.parseIntArg('NR=', tail, undefined );\n        rec.statement = \"\";\n        console.log('here new rec' + JSON.stringify(rec,undefined,2));\n      }\n      else if (!that.isComment(line)) {\n        console.log('here statement  >' + line + '<')\n        if(rec.statement.length) {\n          rec.statement += \"\\n\";\n        }\n        rec.statement += line;\n        console.log('here statement ' + rec.statement);\n      }\n    });\n    if(rec.statement) {\n      res.push(rec);\n    }\n    return res;\n  };\n\n}"],"sourceRoot":"."}