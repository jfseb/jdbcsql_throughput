{"version":3,"sources":["../src/sqlexec/parallel_pool.ts"],"names":[],"mappings":";;AACA,+BAA+B;AAC/B,MAAM,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AAClC,YAAY,CAAC;AAEb,qDAAuC;AACvC,IAAI,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC;AAe9C;IAIE,YAAY,MAAe,EAAE,IAAS,EAAE,MAAY,EAAE,cAAuB;QACzE,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAE,CAAC,MAAM,GAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,sBAAK,CAAC,OAAO,EAAG,cAAc,CAAC,CAAC;QACjD,CAAC;IACL,CAAC;IAAA,CAAC;IACF,YAAY;QACV,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,OAAO,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAC,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;CACF;AAlBD,oCAkBC","file":"sqlexec/parallel_pool.js","sourcesContent":["\nimport * as debug from 'debug';\nconst debuglog = debug('average');\n'use strict';\n\nimport {Forks} from './sqlexec_remote';\nvar SQLExec = require('./sqlexec.js').SQLExec;\n\nimport { ISQLExecutor, IParallelOp, Status,\n  Mode,\n  IRun,\n  Metrics,\n  IMetrics,\n  ICallbacks,\n  IOptions,\n  IParallelExecutor,\n  ITimingMap,\n  IResultRec,\n  ITimingRec } from '../constants';\n\n\nexport class ParallelPool {\n  executors : ISQLExecutor[];\n  forks: Forks;\n  pool : any;\n  constructor(nrexec : number, pool: any, config : any, configFileName : string) {\n      var nrForks = Math.floor( (nrexec-1) / 4);\n      this.pool = pool;\n      console.log('settign up ' + nrForks + ' forks');\n      this.forks = new Forks(nrForks , configFileName);\n      ;\n  };\n  getExecutors() {\n    if(!this.executors) {\n        this.executors = (new SQLExec()).getExecutors(this.pool,4);\n        this.executors = this.executors.concat(this.forks.getExecutors(4));\n    }\n    return this.executors;\n  }\n}\n"],"sourceRoot":"ABC"}