{"version":3,"sources":["../src/sqlexec/runinfork.ts"],"names":[],"mappings":"AACA,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AACtC,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,WAAW,GAAG,OAAO,CAAC;AAE9D,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;AAEpC,IAAI,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,SAAS,gCAAgC,CAAC;AAErF,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,cAAc,CAAC,CAAC;AAChD,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,MAAM,CAAA;AAC3C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;AAE/C,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAExC,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;AAEhC,QAAQ,CAAC,UAAU,CAAE,cAAa,CAAC,CAAE,CAAC;AAEtC,iMAAiM;AACjM,8HAA8H;AAC9H,sDAAsD;AAEtD,IAAI,QAAQ,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC1D,qFAAqF;AACrF,gBAAgB;AAChB,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC;IACtB,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC;IACT,CAAC;IACD,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAE,GAAG;QAEzC,IAAI,EAAE,GAAI,EAAE,MAAM,EAAG,CAAC,CAAC,MAAM,EAAE,MAAM,EAAG,GAAG,CAAC,MAAM,EAAG,GAAG,EAAG,SAAS,EAAE,CAAC;QACvE,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACnB,CAAC,CACF,CAAC,KAAK,CAAE,GAAG;QACV,IAAI,CAAC;YACH,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QACvB,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACb,CAAC;QACD,IAAI,EAAE,GAAI,EAAE,MAAM,EAAG,CAAC,CAAC,MAAM,EAAE,MAAM,EAAG,SAAS,EAAE,GAAG,EAAG,GAAG,EAAC,CAAC;QAC9D,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,CAAC,IAAI,CAAE,EAAE,CAAE,CAAC;IACrB,CAAC,CACF,CAAA;AACD,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC","file":"sqlexec/runinfork.js","sourcesContent":["\nconsole.log('I AM RUNNING THE FORK!');\nvar root = (process.env.FSD_COVERAGE) ? './gen_cov' : './gen';\n\nvar debug = require('debug');\nconst debuglog = debug('runinfork');\n\nvar configFileName = process.argv[2] || `${__dirname}\\\\..\\\\configs\\\\config_derby.js`;\n\nconsole.log('configfilename ' + configFileName);\nvar config = require(configFileName).config\nvar Pool = require('jdbc');\nconsole.log('config' + JSON.stringify(config));\n\nconst SQLExec = require('./sqlexec.js');\n\nvar testpool = new Pool(config);\n\ntestpool.initialize( function () {} );\n\n// /scripts/start_cluster.py --num-relational 1 --num-series 0 --num-docstore 0 --num-disk 0 --num-graph 0  --tc-port=2202  --set-config relational.max_memory=250000000 --reconfigure-interval 3\n// /SAPDevelop/hanalite/build/Release/v2client  -clocalhost:2202 -s /SAPDevelop/hanalite_rel_bench/sample_data/gen.viewdef.sql\n// v2client -c127.0.0.1 -s sample_data/tcp_viewdef.sql\n\nvar executor = new SQLExec.SQLExec().makeRunner(testpool);\n// this executable listens to single query requests (without any synchronization etc)\n// and runs them\nprocess.on('message', (m) => {\n  console.log('IN FORK got ' + JSON.stringify(m));\n  if(!m.statement) {\n    return;\n  }\n  executor.execStatement(m.statement).then( res =>\n    {\n      var m2 =  { handle : m.handle, result : res.result , err : undefined };\n      console.log(' in fork send result' + JSON.stringify(m2));\n      process.send(m2);\n    }\n  ).catch( err => {\n    try {\n      err = err.toString();\n    } catch (e) {\n    }\n    var m2 =  { handle : m.handle, result : undefined, err : err};\n    console.log(' in fork send result' + JSON.stringify(m2));\n    process.send( m2 );\n  }\n)\n});\nconsole.log('I HAVE REGISTERED THE HANDLER!');"],"sourceRoot":"ABC"}