{"version":3,"sources":["../src/sqlexec/parallel_exec.ts"],"names":[],"mappings":"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","file":"sqlexec/parallel_exec.js","sourcesContent":["/**\n *\n * Allows to execute statements in parallel, continous or a given\n * amount of time.\n *\n *\n */\nimport * as debug from 'debug';\nimport * as assert from 'assert';\nconst debuglog = debug('average');\n'use strict';\nimport * as _ from 'lodash';\n/**\n * Responses of a dispatcher\n */\n\n\nimport { ISQLExecutor, IParallelOp, Status,\nMode,\nIRun,\nIMetrics,\nMetrics,\nICallbacks,\nITimingMap,\nIOptions,\nIResultRec,\nITimingRec,\nIParallelExecutor} from '../constants';\n\nvar handles = new Map<string, IParallelOp>();\n\n\n/*\n export const enum ResponseCode {\n  NOMATCH = 0,\n  EXEC,\n  QUERY\n}\n\nexport const enum Status {\n  RUNNING = 0,\n  DONE = 2,\n  STOPPED = 1,\n  INITIAL = 3\n}\n\nexport const enum Mode {\n  SEQUENTIAL = 0,\n  PARALLEL = 1\n}\n\ninterface IRun {\n  index: number,\n  statement : string,\n  status: Status,\n  duration : number,\n  remote? : RemoteExecutor\n};\n\ninterface IMetrics {\n  parallel : number,\n  count_total : number,\n  count_started : number,\n  count_ok : number,\n  sum_duration_all : number,\n  count_bad : number,\n}\n\nclass Metrics implements IMetrics {\n  parallel : number = 0;\n  count_started : number = 0;\n  count_total : number = 0;\n  sum_duration_all : number = 0;\n  count_ok: number = 0;\n  count_bad: number = 0;\n}\n*/\n\nexport function isTerminated(op : IParallelOp) : boolean\n{\n  if (op.cp_running > 0) {\n    return false;\n  }\n  debuglog(' t/s/f  ' + op.tag + ' ' + op.options.terminate_nr  + '/' + op.metrics.count_started + '/' + op.metrics.count_total);\n  if (op.options && (op.options.terminate_nr > 0) && op.metrics.count_total >= op.options.terminate_nr )\n  {\n    op.status = Status.STOPPED;\n    return true;\n  }\n  if (op.options.continuous && (op.status != Status.STOPPED) && (op.status != Status.DONE))\n    return false;\n  if (op.options.continuous && op.options.every_t && op.status == Status.STOPPED) {\n    return true;\n  }\n  return op.slots.every( run => run.status == Status.DONE );\n}\n\n\nvar t_total : number = 0;\nexport function recordStart(op : IParallelOp, slot: IRun)\n{\n  op.metrics.parallel++;\n  if( op.t_started == 0) {\n    op.t_started = Date.now();\n  }\n  slot.status = Status.RUNNING;\n  console.log('S' + (Date.now()- t_total) + ' ' +  (Date.now()- op.t_started) + \"S:\"  + op.parallel + \" \" + op.metrics.count_started + \"/\" + op.metrics.count_total + \"/\" + op.metrics.count_bad + \" \" + op.name);\n  slot.duration = Date.now();\n}\n\nexport function recordEnd(op : IParallelOp, slot: IRun, rc : boolean, res : any)\n{\n  slot.status = Status.DONE;\n  op.metrics.parallel--;\n  op.metrics.count_total++;\n  slot.duration = Date.now() - slot.duration;\n  op.metrics.sum_duration_all += slot.duration;\n  console.log( 'E' + (Date.now()- t_total) + ' ' + (Date.now()- op.t_started) + \"E:\"  + op.parallel + \" \" + op.metrics.count_started + \"/\" + op.metrics.count_total + \"/\" + op.metrics.count_ok + \"/\" + op.metrics.count_bad + ' ' +  slot.duration + ' ' + slot.index + ' len=' + (_.isArray(res) ?  res.length : res)  + ' ' + op.name); //\n  debuglog(JSON.stringify(res));\n  if( rc )\n  {\n    op.metrics.count_ok++;\n  }\n  else {\n    op.metrics.count_bad++;\n  }\n  var d = new Date();\n  if (rc && op.callbacks && op.callbacks.result ) {\n    // console.log('having result ' + JSON.stringify(res));\n    try {\n      op.callbacks.result(undefined, res);\n    } catch( ex) {\n      console.log(ex.toString());\n      console.log(ex.stack);\n    }\n  }\n  op.allresults.push({ ts :  d.toUTCString(), t : d.getTime(), delta_t : d.getTime() - op.t_started, rc : rc, res : res});\n  if (rc && op.callbacks && op.callbacks.progress)\n  {\n    if (rc && op.callbacks && op.callbacks.progress) {\n      try {\n        op.callbacks.progress(op);\n      } catch( ex) {\n          console.log(ex.toString());\n          console.log(ex.stack);\n      }\n    }\n  }\n}\n\nexport function recordOk(op: IParallelOp, run: IRun, res : any) {\n /* res.conn.close(function(err, ok) {\n    if(err)\n     console.log('error closing' + err);\n  });*/\n  recordEnd(op, run, true, res.result);\n}\n\nexport function recordBad(op: IParallelOp, run: IRun, res : any) {\n  console.log('BADD!!!!' + res);\n  if(res.stack) {\n    console.log(res.toString() + \"\\n\" + '' + res.stack);\n  }\n  recordEnd(op,run, false, res);\n}\n\n\nvar cnt = 0;\n\nexport class ParallelExec implements IParallelExecutor {\n\n\n  executorUsage : number[];\n  executors : any[];\n\n  constructor(executors : any[] )\n  {\n    this.executors = executors;\n    this.executorUsage = new Array(executors.length).fill(0);\n  };\n  /**\n   * execute a statement repeatedly until one calls close on the handle.\n   *\n   * @param {string} tag : identifying tag used in some output\n   * part of IParallelOp.tag\n   * @param options\n   * @param cb : callback\n   */\n  startOpRepeat(\n    tag: string,\n    statement: string,\n    parallel: number,\n    options: IOptions = undefined,\n    cb : ICallbacks = undefined) : string\n  {\n    var d = new Date();\n    var op: IParallelOp = {\n      tag : tag,\n      name: (options && options.forcename) ? options.forcename : (tag + '_' + cnt++),\n      statement: statement,\n      t_started : 0,\n      mode : Mode.PARALLEL,\n      status: Status.RUNNING,\n      parallel: parallel,\n      options : {\n        continuous : true,\n        terminate_nr : options && options.terminate_nr,\n        terminate_delta_t : options && options.terminate_delta_t,\n      },\n      cps :[],\n      cp_running: 0,\n      slots: [],\n      timings: [],\n      allresults : [],\n      callbacks : cb,\n      metrics : new Metrics()\n    };\n    // the jdbc driver is limiting to ~4 parallel requests\n    var terminate_nr = options.terminate_nr;\n    assert(handles.has(op.name) == false);\n    handles.set(op.name, op);\n    this.loopIt();\n    return op.name;\n  }\n\n  /**\n   * Run a stingle statement sequential\n   * @param statement\n   */\n  startOpSequential(statement: string, cb : ICallbacks): string\n  {\n    var d = new Date();\n    var op: IParallelOp = {\n      tag : 'sequential',\n      name: 'sequential',\n      statement: statement,\n      t_started : 0,\n      status: Status.RUNNING,\n      parallel : 1,\n      cps : [],\n      cp_running : 0,\n      options : {\n        continuous : false,\n      },\n      mode : Mode.SEQUENTIAL,\n      slots: [],\n      allresults : [],\n      timings :[],\n      metrics : new Metrics()\n    };\n    if(handles.has(op.name)) {\n      op = handles.get('sequential');\n    } else {\n      handles.set(op.name, op);\n    }\n    op.status = Status.RUNNING;\n    op.slots.push( {\n      index : op.slots.length,\n      statement : statement,\n      duration : 0,\n      status: Status.INITIAL,\n      executor : this.assignMinUsedExecutor()\n    });\n    handles.set(op.name, op);\n    this.loopIt();\n    return op.name;\n  };\n\n  triggerLoop() : void {\n    this.loopIt();\n  }\n  /**\n   * mark the operation with handle as STOPPED,\n   * queries will continue to run and finish and fire events,\n   * only then is the handle removed.\n   * @param handle\n   */\n  stopOp(handle: string) {\n    if (handles.has(handle)) {\n      console.log('STOPPING NOW!!!!!!!!!!!!!!!!!!!!');\n      handles.get(handle).status = Status.STOPPED;\n    }\n  };\n\n  /**\n   * return the parallel op with the handle,\n   * @param handle\n   */\n  getOp(handle) : IParallelOp {\n    return handles.get(handle);\n  };\n\n  getHandles() : string[]\n  {\n    return Array.from(handles.keys());\n  };\n\n  registerTiming( time : number, rec : ITimingMap) : void\n  {\n    handles.forEach(function(op)\n    {\n      if(op.status != Status.STOPPED)\n      {\n        op.timings.push({ time : time, rec : rec});\n      }\n    });\n  };\n\n\n  private assignMinUsedExecutor() : ISQLExecutor {\n    var idxmin = 0;\n    var min = this.executorUsage.reduce( (prev,el,index) => {\n      if(el < prev) {\n        idxmin = index;\n      }\n      return Math.min(prev,el);\n      }, 200000);\n      this.executorUsage[idxmin]++;\n    return this.executors[idxmin];\n  };\n\n  private freeExecutorUsage(slots : IRun[]) {\n    var that = this;\n    slots.forEach( slot => {\n      var idx = that.executors.indexOf(slot.executor);\n      if(idx > 0) {\n        assert(idx < that.executorUsage.length);\n        assert(that.executorUsage[idx]  > 0);\n        that.executorUsage[idx]--;\n      }\n    });\n  };\n\n  private\n  scheduleOps(op : IParallelOp) {\n    var that = this;\n    while(op.slots.length < op.parallel) {\n      var slot : IRun =  { index : op.slots.length, statement : op.statement, status : Status.INITIAL,\n        duration : 0, executor : this.assignMinUsedExecutor() };\n      op.slots.push(slot);\n    }\n    debuglog('augmenting parallel ' + op.slots.length);\n    var terminate_nr = op.options && op.options.continuous && op.options.terminate_nr;\n    if (terminate_nr && terminate_nr > 0 && op.metrics.count_total > terminate_nr )\n    {\n      op.status = Status.STOPPED;\n    }\n    var t = Date.now();\n    var terminate_delta_t = op.options && op.options.continuous && op.options.terminate_delta_t;\n    if (terminate_delta_t && terminate_delta_t > 0 && op.t_started > 0\n      && ((t - op.t_started) >  terminate_delta_t ))\n    {\n      op.status = Status.STOPPED;\n    }\n    if (op.status == Status.STOPPED) {\n      return;\n    }\n    if( op.options.every_t > 0 ) {\n      // figure out if the last runnig started op\n      debuglog( 'delta is ' + (Date.now() - op.options.t_last));\n      if( (Date.now() - op.options.t_last ) < op.options.every_t) {\n        return;\n      }\n      // find a slot which is DONE.\n      var res = op.slots.filter( entry => entry.status == Status.DONE || entry.status == Status.INITIAL );\n      if( res.length)\n      {\n        var entry = res[0];\n        entry.status = Status.RUNNING;\n        recordStart(op,entry);\n        debuglog(op.statement);\n        op.options.t_last = Date.now();\n        op.metrics.count_started++;\n        entry.executor.execStatement(entry.statement).then( res =>\n          {\n            recordOk(op,entry,res);\n            that.loopIt();\n          }\n        ).catch( err => {\n          recordBad(op, entry, err);\n          that.loopIt();\n        });\n      }\n      return;\n    }\n    op.slots.every(entry => {\n      if((op.options.continuous && entry.status != Status.RUNNING ) || entry.status == Status.INITIAL)\n      {\n        debuglog(' t/s/f  ' + op.tag + ' ' + op.options.terminate_nr  + '/' + op.metrics.count_started + '/' + op.metrics.count_total);\n        if(op.options && (op.options.terminate_nr > 0) && op.metrics.count_started >= op.options.terminate_nr) {\n          entry.status = Status.DONE;\n          return;\n        }\n        entry.status = Status.RUNNING;\n        recordStart(op,entry);\n        debuglog(op.statement);\n        op.metrics.count_started++;\n        entry.executor.execStatement(entry.statement).then( res =>\n        {\n          recordOk(op,entry,res);\n          that.loopIt();\n        }\n        ).catch( err => {\n          recordBad(op, entry, err);\n          that.loopIt();\n        });\n        return (op.mode != Mode.SEQUENTIAL); // when sequential, stop after first scheduling\n      }\n      return true;\n    });\n  };\n\n  private loopIt() : void\n  {\n    var that = this;\n    if (t_total == 0) {\n      t_total = Date.now();\n    }\n    var removeKey : string[] = [];\n    handles.forEach(function(op , key)\n    {\n      debuglog('looking at' + key + ' value ' + op.name);\n      if (isTerminated(op)) {\n        console.log('is terminated:' + op.name);\n        removeKey.push(key);\n      }\n      that.scheduleOps(op);\n    });\n    removeKey.forEach( key =>\n      { const op = handles.get(key);\n        that.freeExecutorUsage(op.slots);\n        handles.delete(key);\n        console.log(' REMOVING ' + key);\n        if (op.callbacks && op.callbacks.done)\n        {\n          op.callbacks.done(op);\n        }\n      }\n    );\n    if (handles.size > 0)\n    {\n      var that = this;\n      setTimeout( function() { that.loopIt();}, 500);\n    }\n  }\n\n}; // class ParallelExec\n\n\n\n"],"sourceRoot":"ABC"}