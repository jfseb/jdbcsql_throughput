{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/sqlexec/averages.ts"],"names":[],"mappings":"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","file":"sqlexec/averages.js","sourcesContent":["import { RateSampledAverage, EventSampledAverage } from '../aged_averages';\n\nimport * as debug from 'debug';\nimport { INSPECT_MAX_BYTES } from 'buffer';\nconst debuglog = debug('average');\n'use strict';\nimport * as _ from 'lodash';\n/**\n * Responses of a dispatcher\n */\nexport const enum ResponseCode {\n  NOMATCH = 0,\n  EXEC,\n  QUERY\n}\n\nexport const enum Status {\n  RUNNING = 0,\n  DONE = 2,\n  STOPPED = 1,\n  INITIAL = 3\n}\n\nexport const enum Mode {\n  SEQUENTIAL = 0,\n  PARALLEL = 1\n}\n\ninterface IRun {\n  index: number,\n  statement : string,\n  status: Status,\n  duration : number,\n  remote? : RemoteExecutor\n};\n\ninterface IMetrics {\n  parallel : number, \n  query_ok : RateSampledAverage,\n  count_total : number,\n  count_started : number,\n  count_ok : number,\n  sum_duration_all : number,   \n  count_bad : number,\n  query_bad : RateSampledAverage,\n  query_all : RateSampledAverage,\n  query_duration : EventSampledAverage,\n}\n\nclass Metrics implements IMetrics {\n  parallel : number = 0;\n  query_ok: RateSampledAverage = new RateSampledAverage();\n  count_started : number = 0;\n  count_total : number = 0;\n  sum_duration_all : number = 0;\n  count_ok: number = 0;\n  count_bad: number = 0;\n  query_bad: RateSampledAverage = new RateSampledAverage();\n  query_all: RateSampledAverage = new RateSampledAverage();\n  query_duration: EventSampledAverage = new EventSampledAverage();\n}\n\ninterface IResultRec {\n  ts : string,\n  t : number,\n  delta_t : number,\n  rc : boolean,\n  res : any\n};\n\nexport interface ICallbacks {\n  done? : ( op : IParallelOp ) => void, \n  progress? : ( op : IParallelOp ) => void,\n  result? : (err : object, result : any) => void\n}\n\ntype ITimingMap = Map<string, Map<number, number> >;\n\nexport interface ITimingRec {\n  time : number, \n  rec : ITimingMap\n};\n\n\ninterface IOptions {\n  continuous : boolean, \n  terminate_nr? : number, \n  terminate_delta_t? : number, \n  every_t? : number, \n  t_last? : number\n};\n\ninterface IParallelOp {\n  tag : string,\n  name: string,\n  statement: string,\n  status: Status,\n  parallel: number,\n  cps : any[],\n  cp_running: number, \n  options : IOptions, \n  mode : Mode,\n  t_started : number,  /* number in ms when this was started*/\n  logit?: (a: string) => void,\n  slots: IRun[],\n  allresults : IResultRec[],\n  timings : ITimingRec[],\n  metrics : IMetrics,\n  callbacks? : ICallbacks\n};\n\nvar handles = new Map<string, IParallelOp>();\n\nexport function isTerminated(op : IParallelOp) : boolean\n{\n  if (op.cp_running > 0) {\n    return false;\n  }\n  debuglog(' t/s/f  ' + op.tag + ' ' + op.options.terminate_nr  + '/' + op.metrics.count_started + '/' + op.metrics.count_total);\n  if (op.options && (op.options.terminate_nr > 0) && op.metrics.count_total >= op.options.terminate_nr )\n  {\n    op.status = Status.STOPPED;\n    return true;\n  }\n  if (op.options.continuous && (op.status != Status.STOPPED) && (op.status != Status.DONE))\n    return false;\n  if (op.options.continuous && op.options.every_t && op.status == Status.STOPPED) {\n    return true;\n  }\n  return op.slots.every( run => run.status == Status.DONE );\n}\n\n\nvar t_total : number = 0; \nexport function recordStart(op : IParallelOp, slot: IRun)\n{\n  op.metrics.parallel++;\n  if( op.t_started == 0) {\n    op.t_started = Date.now();\n  }\n  slot.status = Status.RUNNING;\n  console.log('S' + (Date.now()- t_total) + ' ' +  (Date.now()- op.t_started) + \"S:\"  + op.parallel + \" \" + op.metrics.count_started + \"/\" + op.metrics.count_total + \"/\" + op.metrics.count_bad + \" \" + op.name);\n  slot.duration = Date.now();\n}\n\nexport function recordEnd(op : IParallelOp, slot: IRun, rc : boolean, res : any)\n{  \n  slot.status = Status.DONE;\n  op.metrics.parallel--;\n  op.metrics.count_total++;\n  slot.duration = Date.now() - slot.duration;\n  op.metrics.sum_duration_all += slot.duration;\n  console.log( 'E' + (Date.now()- t_total) + ' ' + (Date.now()- op.t_started) + \"E:\"  + op.parallel + \" \" + op.metrics.count_started + \"/\" + op.metrics.count_total + \"/\" + op.metrics.count_ok + \"/\" + op.metrics.count_bad + ' ' +  slot.duration + ' ' + slot.index + ' len=' + (_.isArray(res) ?  res.length : res)  + ' ' + op.name); //\n  debuglog(JSON.stringify(res));\n  if( rc )\n  {\n    op.metrics.count_ok++;\n    op.metrics.query_ok.AddSample();\n  }\n  else {\n    op.metrics.count_bad++;\n    op.metrics.query_bad.AddSample();\n  }\n  op.metrics.query_all.AddSample();\n  op.metrics.query_duration.AddSample(slot.duration);\n  var d = new Date();\n  if (rc && op.callbacks && op.callbacks.result ) {\n    // console.log('having result ' + JSON.stringify(res)); \n    try {\n      op.callbacks.result(undefined, res);\n    } catch( ex) {\n      console.log(ex.toString()); \n      console.log(ex.stack);\n    }\n  }\n  op.allresults.push({ ts :  d.toUTCString(), t : d.getTime(), delta_t : d.getTime() - op.t_started, rc : rc, res : res});\n  if (rc && op.callbacks && op.callbacks.progress) \n  {\n    if (rc && op.callbacks && op.callbacks.progress) {\n      try {\n        op.callbacks.progress(op);\n      } catch( ex) {\n          console.log(ex.toString()); \n          console.log(ex.stack);\n      }\n    }\n  }\n}\n\nexport function recordOk(op: IParallelOp, run: IRun, res : any) {\n /* res.conn.close(function(err, ok) {\n    if(err)\n     console.log('error closing' + err);\n  });*/\n  recordEnd(op, run, true, res.result);\n}\n\nexport function recordBad(op: IParallelOp, run: IRun, res : any) {\n  console.log('BADD!!!!' + res);\n  recordEnd(op,run, false, res);\n}\n\nexport class RemoteExecutor {\n  dest : child_process.ChildProcess;\n  idx : number;\n  handle: string;\n  constructor(fork : child_process.ChildProcess, handle : string, idx : number) {\n    this.dest = fork;\n    this.handle = handle;\n    this.idx = idx;\n  };\n  run(statement : string) \n  {\n    var that = this;\n    console.log('sending ' + that.handle + ' ' + that.idx);\n    that.dest.send( { handle : that.handle, idx : that.idx, statement : statement });\n  };\n};\n\n\n\nvar tcnt = 0;\n\nexport function scheduleOps(op : IParallelOp, sqlexec : any) {\n  while(op.slots.length < op.parallel) {\n    var slot : IRun =  { index : op.slots.length, statement : op.statement, status : Status.INITIAL,\n      duration : 0 };\n    var idx = Math.floor(op.slots.length  / 4);\n    if(idx > 0) {\n      slot.remote = new RemoteExecutor(forks[idx], op.name, op.slots.length );\n    }\n    op.slots.push(slot);\n  }\n  debuglog('augmenting parallel ' + op.slots.length);\n  var terminate_nr = op.options && op.options.continuous && op.options.terminate_nr; \n  if (terminate_nr && terminate_nr > 0 && op.metrics.count_total > terminate_nr )\n  {\n    op.status = Status.STOPPED;\n  }\n  var t = Date.now();\n  var terminate_delta_t = op.options && op.options.continuous && op.options.terminate_delta_t; \n  if (terminate_delta_t && terminate_delta_t > 0 && op.t_started > 0 \n    && ((t - op.t_started) >  terminate_delta_t ))\n  {\n    op.status = Status.STOPPED;\n  }\n  if (op.status == Status.STOPPED) {\n    return;\n  }\n  if( op.options.every_t > 0 ) {\n    // figure out if the last runnig started op \n    debuglog( 'delta is ' + (Date.now() - op.options.t_last));\n    if( (Date.now() - op.options.t_last ) < op.options.every_t) {\n      return; \n    }\n    // find a slot which is DONE. \n    var res = op.slots.filter( entry => entry.status == Status.DONE || entry.status == Status.INITIAL ); \n    if( res.length)\n    {\n      var entry = res[0];\n      entry.status = Status.RUNNING;\n      recordStart(op,entry);\n      debuglog(op.statement);\n      op.options.t_last = Date.now();      \n      op.metrics.count_started++;\n      sqlexec.execStatement(entry.statement).then( res =>\n        {\n          recordOk(op,entry,res);\n          loopIt(sqlexec);\n        }\n      ).catch( err => {\n        recordBad(op, entry, err);\n        loopIt(sqlexec);\n      });\n    }\n    return;\n  }\n\n  op.slots.every(entry => {\n    if((op.options.continuous && entry.status != Status.RUNNING ) || entry.status == Status.INITIAL)\n    {\n      debuglog(' t/s/f  ' + op.tag + ' ' + op.options.terminate_nr  + '/' + op.metrics.count_started + '/' + op.metrics.count_total);\n      if(op.options && (op.options.terminate_nr > 0) && op.metrics.count_started >= op.options.terminate_nr) {\n        entry.status = Status.DONE;\n        return; \n      }\n      entry.status = Status.RUNNING;\n      recordStart(op,entry);\n      debuglog(op.statement);\n      op.metrics.count_started++;    \n      if(entry.remote) {\n        entry.remote.run(entry.statement);        \n      } else {\n        sqlexec.execStatement(entry.statement).then( res =>\n          {\n            recordOk(op,entry,res);\n            loopIt(sqlexec);\n          }\n        ).catch( err => {\n          recordBad(op, entry, err);\n          loopIt(sqlexec);\n        });     \n      }  \n      return (op.mode != Mode.SEQUENTIAL); // when sequential, stop after first scheduling\n    }\n    return true;\n  });\n}\n\nexport function loopIt( sqlexec: any) : void\n{\n  if (t_total == 0) {\n    t_total = Date.now();\n  }\n  var removeKey : string[] = [];\n  handles.forEach(function(op , key)\n  {\n    debuglog('looking at' + key + ' value ' + op.name);\n    if (isTerminated(op)) {\n      console.log('is terminated:' + op.name);\n      removeKey.push(key);\n    }\n    scheduleOps(op, sqlexec);\n  });\n  removeKey.forEach( key =>\n    { const op = handles.get(key);\n      handles.delete(key);\n      console.log(' REMOVING ' + key);\n      if (op.callbacks && op.callbacks.done) \n      {\n        op.callbacks.done(op);\n      }    \n    }\n  );\n  if (handles.size > 0) \n  {\n    setTimeout( function() { loopIt(sqlexec);}, 500);\n  }\n}\n\nexport function startOpMonitor() {\n  var d = new Date();\n  var op: IParallelOp = {\n    tag : \"monitor\",\n    name: \"monitor\",\n    statement: 'SELECT * FROM SYS.INTERNAL_REL_NODE_RT_AVG;',\n    t_started : 0,\n    mode : Mode.PARALLEL,\n    status: Status.RUNNING,\n    parallel : 4,\n    options : {\n      continuous : true,      \n      t_last : 0,\n      every_t : 2000, // every second!\n    },\n    cps : [],\n    cp_running : 0,\n    slots: [],\n    timings: [],\n    allresults : [],\n    metrics : new Metrics(), \n    callbacks : {\n      result : function(err, res) {\n        if(!err) {\n          var timing = makeTimingRecord(res);\n          registerTiming(Date.now(), timing);\n        }\n      }\n    }\n  };\n  handles.set(op.name, op);\n  return op.name;\n}\n\nvar cnt = 0;\nimport * as child_process from 'child_process';\nimport * as fs from 'fs';\nimport { removeListener, fork } from 'cluster';\nimport { LOADIPHLPAPI } from 'dns';\n/**\n *  execute a statement repeatedly until one calls close on the handle.\n *\n *\n */\nexport function startOpRepeat(tag: string, statement: string, parallel: number, options: IOptions = undefined, cb : ICallbacks = undefined): string {\n  var d = new Date();\n  var op: IParallelOp = {\n    tag : tag,\n    name: tag + '_' + cnt++,\n    statement: statement,\n    t_started : 0,\n    mode : Mode.PARALLEL,\n    status: Status.RUNNING,\n    parallel: parallel, \n    options : {\n      continuous : true,\n      terminate_nr : options && options.terminate_nr,\n      terminate_delta_t : options && options.terminate_delta_t,\n    },\n    cps :[],\n    cp_running: 0,\n    slots: [],\n    timings: [],\n    allresults : [],\n    callbacks : cb,\n    metrics : new Metrics()\n  };\n\n  // the jdbc driver is limiting to ~4 parallel requests\n  var terminate_nr = options.terminate_nr; \n  handles.set(op.name, op);\n  return op.name;\n}\n\nexport function startOpSequential(statement: string): string {\n  var d = new Date();\n  var op: IParallelOp = {\n    tag : 'sequential',\n    name: 'sequential',\n    statement: statement,\n    t_started : 0,\n    status: Status.RUNNING,\n    parallel : 1,\n    cps : [],\n    cp_running : 0,\n    options : {\n      continuous : false,      \n    },\n    mode : Mode.SEQUENTIAL,\n    slots: [],\n    allresults : [],\n    timings :[],\n    metrics : new Metrics()\n  };\n  if(handles.has(op.name)) {\n    op = handles.get('sequential');\n  } else {\n    handles.set(op.name, op);\n  }\n  op.status = Status.RUNNING;\n  op.slots.push( {\n    index : op.slots.length,\n    statement : statement,\n    duration : 0,\n    status: Status.INITIAL\n  });\n  handles.set(op.name, op);\n  return op.name;\n}\n\nexport function stopOp(handle: string) {\n  if (handles.has(handle)) {\n    console.log('STOPPING NOW!!!!!!!!!!!!!!!!!!!!');\n    handles.get(handle).status = Status.STOPPED;\n  }\n};\n\nexport function dumpProgress(op : IParallelOp) {\n  var avg = getBestAvg(op.t_started, op.timings);\n  console.log(' dump progress ' + op.metrics.count_total);\n  if( op.metrics.count_total > 1) {\n    console.log( op.metrics.count_total * 1000 * 60 / (Date.now() - op.t_started) + ' qps; ' + (op.metrics.count_bad * 100 / op.metrics.count_total) +  ' BEST_AVG:' + JSON.stringify(avg));\n  }\n}\nexport interface IResult {\nTAG: string,\nQPM : number, \nBAD : number, \nPAR : number, \nDUR : number, \nDDP : number, \nMAXM : number, \nCPU : number, \nMEM : number,\nMEU : number, \nPAR_N : number, \nQPM_N : number, \nDUR_N : number\n};\n\nexport function dumpDone(op : IParallelOp): IResult {\n  console.log(\"******* DONE \"); \n  var avg = getBestAvg(op.t_started, op.timings);\n  console.log( op.metrics.count_total * 1000 * 60 / (Date.now() - op.t_started) + ' qps' + (op.metrics.count_bad * 100 / op.metrics.count_total) +  ' BEST_AVG:' + JSON.stringify(avg));\n  var avgx : any = avg.values; \n  console.log( 'QPM\\t|BAD%\\t|PAR'\n          + '\\t|DUR'\n          + '\\t|DDP'          \n          + '\\t|MAX_MEM'\n          + '\\t|CPU%'\n          + '\\t|MEM%'\n          + '\\t|MEU'\n          + '\\t|QPM_N'\n          + '\\t|PAR_P'\n          + '\\t|AGGR_PLAN_EXEC_DURATION'          \n          )\n  var result : IResult = {\n    TAG : op.tag,\n    QPM : Math.floor(op.metrics.count_total * 1000 * 60 / (Date.now() - op.t_started)) ,\n    BAD : (op.metrics.count_bad * 100 / op.metrics.count_total),\n    PAR :  (op.parallel ),\n    DUR : Math.floor(op.metrics.sum_duration_all / (100*op.metrics.count_total ))/10,\n    DDP : Math.floor(op.metrics.sum_duration_all / (100*op.parallel*op.metrics.count_total ))/10,\n    MAXM : avgx.MAX_MEM_EVER ,\n    CPU :  avgx.CPU_UTILIZATION,\n    MEM : avgx.MEM_UTILIZATION,\n    MEU : avgx.MEM_USAGE,\n    QPM_N : avgx.QUERY_PER_MIN,\n    PAR_N :  avgx.NR_PARALLEL_PLAN,\n    DUR_N : avgx.AGGR_PLAN_EXEC_DURATION\n  };          \n  dumpAllResults([result]);\n  console.log( result.TAG + \n       + '\\t|' + result.QPM \n       + '\\t|' + result.BAD\n       + '\\t|' + (op.parallel )\n       + '\\t|' + result.DUR, \n       + '\\t|' + result.DDP, \n       + '\\t|' + avgx.MAX_MEM_EVER \n       + '   \\t|' + avgx.CPU_UTILIZATION\n       + '\\t|' + result.MEM,\n       + '\\t|' + result.MEU,\n       + '\\t|' + avgx.NR_PARALLEL_PLAN\n       + '\\t|' + avgx.QUERY_PER_MIN\n       + '\\t|' + avgx.AGGR_PLAN_EXEC_DURATION            \n  );\n  return result;\n}\n\nexport function makeTimingRecord(res : any) : ITimingMap {\n  var result : ITimingMap = new Map<string, Map<number, number> >();\n  Keys.forEach(key => {\n    res.forEach( rec => {\n      if (rec.NAME == key) {\n        debuglog( ' found record ' + rec.VALUE + \" \" + JSON.stringify(rec));\n        if(!result.has(key)) {\n          result.set(key, new Map<number,number>());\n        }\n        var mp = result.get(key);\n        mp.set(parseInt(rec.NR), parseInt(rec.VALUE));\n      }\n    });\n  });\n  return result;  \n}\n\nexport function registerTiming( time : number, rec : ITimingMap) \n{\n  handles.forEach(function(op) {\n    if(op.status != Status.STOPPED) \n    {\n      op.timings.push({ time : time, rec : rec});\n      //console.log( 'timing length now' + op.timings.length);\n    }\n  });\n}\n\nexport function getBestTime(start : number, end : number )\n{\n  return start + (end - start)*0.8; \n}\n\nexport function getAvgLength( start : number, end : number )\n{\n  return (end-start) * 0.2;\n}\n\nexport class IAvgRecord {\n  MAX_MEM_USAGE_30s : number = 0;\n  MEM_USAGE : number = 0;  \n  AGGR_PLAN_EXEC_DURATION : number = 0;\n  QUERY_PER_MIN : number = 0;  \n  CPU_UTILIZATION : number = 0;\n  MEM_UTILIZATION : number = 0;\n  MAX_MEM_EVER : number = 0;\n  NR_PARALLEL_PLAN : number = 0;\n  PLAN_EXEC_DURATION : number = 0;\n  constructor() {}\n};\n\nexport class IAvgSet {\n  time : number = 0;\n  avg : number = 0;\n  values : IAvgRecord = new IAvgRecord();\n};\n\nexport const Keys = Array.from(Object.keys(new IAvgRecord())); \nexport function getBestAvg(start : number,  recs :  ITimingRec[]) : IAvgSet\n{\n  // find the maximum of ITimingRec[]\n  //recs.forEach(entry => console.log(' time is ' + entry.time ))\n  const end_time = recs.reduce( (prev,current) => (current.time > prev)? current.time: prev , 0);\n  const best_time = getBestTime(start, end_time);\n  debuglog( 'start' + (start - t_total) + ' end' + (end_time - t_total) + ' best' + ( best_time - t_total) );\n  if( recs.length < 3) \n  { \n    console.log(\"warning, timing length low\" + recs.length);\n  }\n  recs.forEach(rec => \n    debuglog('at ' + (rec.time - t_total)));\n  const bestTimingRec = recs.reduce( (prev, current) =>  (!prev || (current.time < best_time)) ? current : prev , undefined);\n  var result : IAvgSet = \n  {\n    time : 0,\n    avg : 0,\n    values : new IAvgRecord    \n  };\n  const best_avg = getAvgLength(start, end_time);\n  debuglog('best avg length ' + best_avg);\n  var actual_best_avg = 0;\n  if ( bestTimingRec ) \n  {\n    debuglog('got a best record!!');\n    Keys.forEach(key => {\n    var rec = bestTimingRec.rec.get(key);\n    var sortedIntArr = Array.from(rec.keys()).map(k => parseInt(' ' + k)).sort();    \n    debuglog('sortedIntArr' + sortedIntArr);\n    result.values[key] = sortedIntArr.reduce((prev, time) =>\n       { \n         if((time < best_avg)) \n         {\n           actual_best_avg = time;\n           return rec.get(time);\n         } else {\n           return prev;\n          }\n        }\n       , 0); \n      });\n    }\n  debuglog('best avg' + actual_best_avg);\n  result.avg = actual_best_avg; \n  result.time = bestTimingRec && bestTimingRec.time;  \n  return result;\n}\n\nexport function dumpNice(v : any, len : number) {\n  var s = '' + v;\n  while(s.length < len) {\n    s = ' ' + s;\n  }\n  return s;\n}\n\n  \n  //var handle = runner.startOpRepeat('SELECT COUNT(*) FROM T1;', 20);\n  \n  //QPM     |BAD%   |PAR    |NR_PARALLEL_PLAN       |MAX_MEM        |CPU%   |MEM%   |QUERY_PER_MIN  |AGGR_PLAN_EXEC_DURATION\n  //10      |0      |4      |4      |165    |94     |173    |169    |2624\n  //QPM     |BAD%   |PAR    |PAR_P  |MAX_MEM        |CPU%   |MEM%   |QUERY_PER_MIN  |AGGR_PLAN_EXEC_DURATION\n  //10      |0      |8      |4      |174    |98     |171    |1      |2761\n  \n  \nexport function dumpAllResults(allresult : IResult[]) {\n  if(allresult.length == 0) {\n    return;\n  }\n  var s1 = Object.keys(allresult[0]).map( key => dumpNice(key,10)).join(\",\");\n  console.log(s1);\n  allresult.forEach(entry => \n  {\n    var sn =  Object.keys(entry).map( key => dumpNice(entry[key],10)).join(',');\n    console.log(sn);\n  });\n}\n\nvar index = 0;\nvar allresults = [];\nvar forks : child_process.ChildProcess[] = [];\n\nexport function startSequence(executor, current_index = 0) {\n\nvar hndl = startOpMonitor();\n\n//var tcp001 = 'select count(*), AVG(T1.L_QUANTITY), AVG(T1.L_DISCOUNT + T2.L_DISCOUNT), AVG(T2.L_EXTENDEDPRICE), T2.L_SHIPMODE FROM LINEITEM1 AS T1 JOIN LINEITEM1 AS T2 ON T1.L_SHIPMODE = T2.L_SHIPMODE WHERE T1.L_SHIPMODE <= \\'FOB\\' AND T1.L_QUANTITY > 2 AND T2.L_QUANTITY > 10 GROUP BY T2.L_SHIPMODE ORDER BY T2.L_SHIPMODE;';\n//var tcp001 = 'select count(*), AVG(T1.L_QUANTITY), AVG(T1.L_DISCOUNT + T2.L_DISCOUNT), AVG(T2.L_EXTENDEDPRICE), T2.L_SHIPMODE FROM LINEITEM1 AS T1 JOIN LINEITEM1 AS T2 ON T1.L_SHIPMODE = T2.L_SHIPMODE WHERE T1.L_SHIPMODE <= \\'B\\' AND T1.L_QUANTITY > 10 AND T2.L_QUANTITY > 10 GROUP BY T2.L_SHIPMODE ORDER BY T2.L_SHIPMODE;';\n\n//var tcp001 = 'select count(*), AVG(T1.L_QUANTITY), AVG(T1.L_DISCOUNT + T2.L_DISCOUNT), AVG(T2.L_EXTENDEDPRICE), T2.L_SHIPMODE FROM LINEITEM1 AS T1 JOIN LINEITEM1 AS T2 ON T1.L_SHIPMODE = T2.L_SHIPMODE WHERE T1.L_SHIPMODE <= \\'B\\' AND T1.L_QUANTITY > 10 AND T2.L_QUANTITY > 100 GROUP BY T2.L_SHIPMODE ORDER BY T2.L_SHIPMODE;';\n\nvar tcp_001_4 = 'select count(*), AVG(T1.L_QUANTITY), AVG(T1.L_DISCOUNT + T2.L_DISCOUNT), AVG(T2.L_EXTENDEDPRICE), T2.L_SHIPMODE FROM LINEITEM1 AS T1 JOIN LINEITEM1 AS T2 ON T1.L_SHIPMODE = T2.L_SHIPMODE WHERE T1.L_SHIPMODE <= \\'FOB\\' AND T1.L_PARTKEY > 1000 AND T2.L_PARTKEY > 1000 AND T1.L_QUANTITY > 2 AND T2.L_QUANTITY > 10 GROUP BY T2.L_SHIPMODE ORDER BY T2.L_SHIPMODE;';\nvar parq_1m_zip = 'select max(VCHAR50RNDVL), vchar4dic6, avg(UINT64_RND) from GEN_1M_PAR_ZIP group by VCHAR4DIC6;';\n\n//ALTERD\n//tcp_001_4 = 'select count(*), AVG(T1.L_QUANTITY), AVG(T1.L_DISCOUNT + T2.L_DISCOUNT), AVG(T2.L_EXTENDEDPRICE), T2.L_SHIPMODE FROM LINEITEM1 AS T1 JOIN LINEITEM1 AS T2 ON T1.L_SHIPMODE = T2.L_SHIPMODE WHERE T1.L_SHIPMODE <= \\'FOB\\' AND T1.L_PARTKEY > 1000 AND T2.L_PARTKEY > 1000 AND T1.L_QUANTITY > 2 AND T2.L_QUANTITY > 1000 GROUP BY T2.L_SHIPMODE ORDER BY T2.L_SHIPMODE;';\n\n\nvar arr = [\n  { PAR : 1,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n  { PAR : 2,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n // { PAR : 3,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},  \n  { PAR : 4,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n // { PAR : 6,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n  { PAR : 8,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n//  { PAR :10,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n  { PAR :12,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n  { PAR :16,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'},\n  { PAR :20,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'}, \n  { PAR :32,  MAX_NR : 40, statement : '', TAG : 'TCP_P1'}\n];\narr.forEach( entry => entry['TAG'] = 'TCP_P_' + entry.PAR );\narr.forEach( entry => entry['TAG'] = 'P1Z_P_' + entry.PAR );\narr.forEach( entry => entry['statement'] = tcp_001_4 );\narr.forEach( entry => entry['statement'] = parq_1m_zip );\narr.forEach( entry => entry['MAX_NR'] = 40 );\n\nif (current_index == 0) {\n  var max_parallel = arr.reduce(  (prev, entry) => Math.max(prev, entry.PAR), 0 );\n\n  for(var i = 0; i < Math.ceil(max_parallel / 4); ++i)\n  {\n    var cp = child_process.fork(`${__dirname}/../../runoneForked.js`,undefined, { silent: true });\n    forks.push( cp );\n    cp.on('message', (m) => {\n      console.log('received message ' +  m.handle + ' ' + m.idx + ' ' + m.result + ' ' + JSON.stringify(m.err));\n      debugger;\n      if(handles.has(m.handle)) {\n        console.log('have handle!')\n        var op = handles.get(m.handle);\n        if(op.slots.length > m.idx) \n        {\n          var run = op.slots[m.idx];\n          if(m.err) {\n            recordBad(op, run, m.err);\n          } else {\n            recordOk(op, run, { result : m.result});\n          }\n        } else \n        {\n          console.log('idx is out of bounds>> ' + op.slots.length);\n        }\n      } else {\n        console.log(' no handle found !!');\n      }\n    });\n  }\n}\n\n//var handle = runner.startOpRepeat('SELECT COUNT(*) FROM T1;', 20);\n\n//QPM     |BAD%   |PAR    |NR_PARALLEL_PLAN       |MAX_MEM        |CPU%   |MEM%   |QUERY_PER_MIN  |AGGR_PLAN_EXEC_DURATION\n//10      |0      |4      |4      |165    |94     |173    |169    |2624\n//QPM     |BAD%   |PAR    |PAR_P  |MAX_MEM        |CPU%   |MEM%   |QUERY_PER_MIN  |AGGR_PLAN_EXEC_DURATION\n//10      |0      |8      |4      |174    |98     |171    |1      |2761\n\n\nvar showOp = dumpProgress;\nvar makeNext = function (op)  {\n  var res = dumpDone(op);\n  allresults.push(res);\n  dumpAllResults(allresults);\n  stopOp('monitor');\n  stopOp(handle);\n  loopIt(executor);\n  ++index;\n  if(index < arr.length) {\n    console.log(\"*** INDEX\");\n    startSequence(executor, index);\n  } else {\n    // assume done\n    forks.forEach( (fork, idx) => console.log('fork' + idx + ' ' + fork.connected ));    \n    forks.forEach( fork => fork.kill() );\n  }\n};\n\nhandle = startOpRepeat( arr[current_index].TAG, arr[current_index].statement, arr[current_index].PAR, {continuous : true,  terminate_nr : arr[current_index].MAX_NR }, \n  {\n    progress : showOp,\n    done : makeNext\n  });\n\nloopIt(executor);\nvar handle;\nsetTimeout( function() {\n}, 500);\n\n// beware, this only stops when all queries are completed;\n/*\nsetTimeout( function() {\n  console.log('stopping now');\n  stopOp(handle);\n  loopIt(executor);\n}, 200000);\n*/\n\n};\n"],"sourceRoot":"ABC"}